using FluentAssertions;
using Kodify.Repository.Models;
using Kodify.Repository.Services;
using Xunit;

namespace Kodify.Tests.Repository.Services
{
    public class ProjectAnalyzerTests : IDisposable
    {
        private readonly ProjectAnalyzer _analyzer;
        private readonly string _testPath;

        public ProjectAnalyzerTests()
        {
            _analyzer = new ProjectAnalyzer();
            _testPath = Path.Combine(Path.GetTempPath(), "KodifyTests", Guid.NewGuid().ToString());
            Directory.CreateDirectory(_testPath);
        }

        public void Dispose()
        {
            if (Directory.Exists(_testPath))
            {
                Directory.Delete(_testPath, true);
            }
        }

        [Fact]
        public void Analyze_ShouldDetectApiController_WhenControllerBaseIsInherited()
        {
            // Arrange
            var controllerCode = @"
using Microsoft.AspNetCore.Mvc;
namespace Test.Controllers
{
    public class TestController : ControllerBase
    {
        [HttpGet]
        public IActionResult Get() => Ok();
    }
}";
            var filePath = Path.Combine(_testPath, "TestController.cs");
            File.WriteAllText(filePath, controllerCode);

            // Act
            var result = _analyzer.Analyze(_testPath);

            // Assert
            result.HasWebApi.Should().BeTrue();
        }

        [Fact]
        public void Analyze_ShouldDetectLicense_WhenLicenseFileExists()
        {
            // Arrange
            var licenseContent = "MIT License\nCopyright (c) 2024";
            var licensePath = Path.Combine(_testPath, "LICENSE");
            File.WriteAllText(licensePath, licenseContent);

            // Act
            var result = _analyzer.Analyze(_testPath);

            // Assert
            result.License.Type.Should().Be("MIT");
            result.License.Content.Should().Be(licenseContent);
        }

        [Fact]
        public void Analyze_ShouldSkipAutogeneratedFiles()
        {
            // Arrange
            var files = new[]
            {
                "AssemblyInfo.cs",
                "GlobalUsings.g.cs",
                "Normal.cs"
            };

            foreach (var file in files)
            {
                File.WriteAllText(Path.Combine(_testPath, file), "// Test content");
            }

            // Act
            var result = _analyzer.Analyze(_testPath);

            // Assert
            result.SourceFiles.Should().HaveCount(1);
            result.SourceFiles[0].FilePath.Should().EndWith("Normal.cs");
        }

        [Fact]
        public void Analyze_ShouldAnalyzeProjectStructure()
        {
            // Arrange
            var directories = new[]
            {
                "Controllers",
                "Models",
                "Services"
            };

            foreach (var dir in directories)
            {
                Directory.CreateDirectory(Path.Combine(_testPath, dir));
                File.WriteAllText(Path.Combine(_testPath, dir, "Test.cs"), "// Test content");
            }

            // Act
            var result = _analyzer.Analyze(_testPath);

            // Assert
            result.Structure.Directories.Should().Contain(d => directories.Any(dir => d.EndsWith(dir)));
            result.Structure.FileTypes.Should().Contain(".cs");
        }

        [Fact]
        public void Analyze_ShouldDetectGitRepository()
        {
            // Note: This test is limited since we can't easily create a Git repo in a test
            // Act
            var result = _analyzer.Analyze(_testPath);

            // Assert
            result.HasGitRepository.Should().BeFalse();
            result.RepositoryUrl.Should().Be("No Git repository found");
        }
    }
} 